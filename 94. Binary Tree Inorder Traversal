/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        // TreeNode curr = root;
        // while(curr!=null){
        //     if(curr.left == null){
        //         list.add(curr.val); 
        //         curr=curr.right;
        //     }
        //     else{
        //         TreeNode comeback = curr.left;
        //         while(comeback.right != null && comeback.right != curr){
        //             comeback=comeback.right;
        //         }
        //         if(comeback.right == null){
        //             comeback.right = curr;
        //             curr = curr.left;
        //         }
        //         else {
        //             comeback.right = null; 
        //             list.add(curr.val); 
        //             curr = curr.right; 
        //         }
        //     }
        // }
    	
    //Recursive
        if (root == null) return list;
        traverse(root,list);
        return list;
    }
    public void traverse(TreeNode node, List<Integer> list){
        if (node == null) return;
        if (node.left != null) traverse(node.left, list);
        list.add(node.val);
        if (node.right != null) traverse(node.right, list);
    }
}
